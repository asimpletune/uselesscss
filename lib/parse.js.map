{"version":3,"sources":["../src/parse.js"],"names":[],"mappings":";;GAGA,IAAM,KAAK,CAAG,GAAQ,CACpB,GAAG,CAAG,IAAQ,CACd,SAAS,CAAG,IAAQ,CACpB,eAAe,CAAG,IAAQ,CAC1B,SAAS,CAAG,IAAQ,CAAA,AAEtB,IAAM,UAAU,CAAG,CAAC,KAAK,CAAE,GAAG,CAAE,SAAS,CAAE,eAAe,CAAE,SAAS,CAAC,CAAA,AACtE,IAAM,yBAAyB,QAAQ,KAAK,UAAK,GAAG,UAAK,SAAS,UAAK,eAAe,UAAK,SAAS,AAAE;;GAAC,AAKvG,IAAM,YAAY,CAAG,GAAQ,CAAA,AAC7B,IAAM,IAAI,CAAG,GAAQ,CAAA,AACrB,IAAM,KAAK,CAAG,GAAQ,CAAA,AAEtB,IAAM,WAAW,CAAG,CAAC,KAAK,CAAE,IAAI,CAAE,YAAY,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,AAClE,IAAM,4BAA4B,QAAQ,YAAY,UAAK,KAAK,UAAK,IAAI,AAAE,CAAC,AAE5E,IAAM,cAAc,CAAG,CAAC,UAAM,CAC5B,OAAO,IAAI,MAAM,SAAO,yBAAyB,GAAG,4BAA4B,SAAO,GAAG,CAAC,CAAA,CAC5F,CAAA,EAAG;;GAAA,kBAKW,CACb,QAAQ,CAAE,kBAAS,QAAQ,CAAE,CAC3B,OAAO,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA,CACtC,CACF","file":"parse.js","sourcesContent":["/**\n * Whitespace\n */\nconst SPACE = '\\u0020',\n  TAB = '\\u0009',\n  LINE_FEED = '\\u000A',\n  CARRIAGE_RETURN = '\\u000D',\n  FORM_FEED = '\\u000C'\n\nconst WHITESPACE = [SPACE, TAB, LINE_FEED, CARRIAGE_RETURN, FORM_FEED]\nconst CSS_COMBINATOR_WHITESPACE = `\\\\${SPACE}\\\\${TAB}\\\\${LINE_FEED}\\\\${CARRIAGE_RETURN}\\\\${FORM_FEED}`;\n\n/**\n * Other combinator separators\n */\nconst GREATER_THAN = '\\u003E'\nconst PLUS = '\\u002B'\nconst TILDE = '\\u007E'\n\nconst COMBINATORS = [TILDE, PLUS, GREATER_THAN].concat(WHITESPACE)\nconst CSS_COMBINATOR_NONWHITESPACE = `\\\\${GREATER_THAN}\\\\${TILDE}\\\\${PLUS}`;\n\nconst SELECTOR_REGEX = (() => {\n  return new RegExp(`([^${CSS_COMBINATOR_WHITESPACE}${CSS_COMBINATOR_NONWHITESPACE}])+`, 'g')\n})()\n\n/**\n * Takes a selector, returns an array of one or more sequences of simple selectors, delimited by combinators\n */\nexport default {\n  sequence: function(selector) {\n    return selector.match(SELECTOR_REGEX)\n  }\n}\n"]}