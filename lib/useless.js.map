{"version":3,"sources":["../src/useless.js"],"names":[],"mappings":"wFAMwB,OAAO;;GAAhB,SAAS,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CACxC,IAAI,CAAC,CAAG,kBAAQ,IAAI,CAAC,IAAI,CAAC,CAAA,AAC1B,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,AAEtB,SAAS,SAAS,CAAC,GAAG,CAAE,CACtB,IAAI,GAAG,CAAG,cAAO,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,AAClC,IAAI,cAAc,CAAG,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,AAC1C,IAAI,WAAW,CAAG,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,CAAA,AACtD,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,WAAW,CAAC,AACnC,OAAO,cAAO,SAAS,CAAC,GAAG,CAAC,CAAA,CAC7B,AAED,SAAS,aAAa,CAAC,IAAI,CAAE,CAC3B,OAAQ,IAAI,CAAC,IAAI,EACf,KAAK,MAAM,CACT,IAAI,MAAM,CAAG,KAAK,CAAC,AACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAC,QAAQ,CAAK,CACnC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAE,8BAA8B,CAAE,MAAM,CAAE;AAAC,AACtE,IAAI,SAAS,CAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,AAC5B,GAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAE,CACxB,MAAM,GAAG,IAAI,CAAC,CACf,CACF,CAAC,CAAC,AACH,OAAO,MAAM,CAAC,AACd,MAAM,gFAAA,AAER,KAAK,SAAS,CACZ,MAAM,AACR,KAAK,OAAO,CACV,MAAM,AACR,KAAK,WAAW,CACd,MAAM,AACR,KAAK,WAAW,CACd,MAAM,AACR,QACE,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CACpD,CACF;;;KAAA,AAMD,SAAS,cAAc,CAAC,IAAI,CAAE,IAAI,CAAE,MAAM,CAAC,CACzC,IAAI,KAAK,CAAG,CAAC,CAAC,oBAAoB,CAAC,CAAE,MAAM,CAAG,EAAE,CAAC,AACjD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAC,GAAG,CAAK,CAClC,GAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAE,CACvC,IAAI,EAAE,CAAG,KAAK,CAAC,GAAG,CAAC,CAAE,GAAG,CAAG,EAAE,CAAC,AAC9B,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CACzB,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,AACtC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CACjB,CACF,CAAC,CAAA,AACF,OAAO,MAAM,CAAC,CACf;;KAAA,AAKD,SAAS,YAAY,CAAC,IAAI,CAAE,CAC1B,IAAI,OAAO,CAAG,OAAO,CAAC,OAAO,CAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAG,EAAE,CAAA,AACrE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAE,IAAI,CAAC,CAAA,AAClC,OAAO,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAA,CACxC;;KAAA,AAKD,SAAS,aAAa,CAAC,IAAI,CAAE,CAC3B,IAAI,OAAO,CAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAA,AACnC,OAAO,OAAO,CAAC,KAAK,CAAE,OAAO,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAA,CACtD,CACF","file":"useless.js","sourcesContent":["import cssLib from 'css'\nimport cheerio from 'cheerio';\n\n/**\n * Useless(html, css) -> css\n */\nexport default function Useless(html, css){\n  var $ = cheerio.load(html)\n  return reduceCss(css);\n\n  function reduceCss(css) {\n    let ast = cssLib.parse(css || '');\n    let candidateRules = ast.stylesheet.rules;\n    let activeRules = candidateRules.filter(filterCssRule)\n    ast.stylesheet.rules = activeRules;\n    return cssLib.stringify(ast)\n  }\n\n  function filterCssRule(rule) {\n    switch (rule.type) {\n      case \"rule\":\n        var result = false;\n        rule.selectors.forEach((selector) => {\n          selector = selector.replace( /(\\(|\\)|=|\\\"|@|:|\\.|\\[|\\]|,)/g, '\\\\$1' ); //\" <-- atom, :(\n          let selection = $(selector);\n          if (selection.length > 0) {\n            result = true;\n          }\n        });\n        return result;\n        break;\n      /* TODO: these cases could be useful to consider, but I'll handle them later */\n      case \"comment\":\n        break;\n      case \"media\":\n        break;\n      case \"keyframes\":\n        break;\n      case \"font-face\":\n        break;\n      default:\n        console.debug(\"Add a case for this!\", rule.type);\n    }\n  }\n\n  /**\n   * Note: Leaving this here for now, but design of the tool has changed and probably won't do things this way any more\n   * return [{uri, local}, ...]\n   */\n  function parseCssToLoad(html, only, ignore){\n    let links = $('link[href$=\".css\"]'), result = [];\n    Object.keys(links).forEach((key) => {\n      if (!Number.isNaN(Number.parseInt(key))) {\n        let el = links[key], obj = {};\n        obj.uri = el.attribs.href,\n        obj.local = obj.uri.charAt(0) === '.';\n        result.push(obj)\n      }\n    })\n    return result;\n  }\n\n  /**\n   * Note: Leaving this here for now, but design of the tool has changed and probably won't do things this way any more\n   */\n  function loadLocalCss(path) {\n    let workdir = options.workdir ? pathLib.resolve(options.workdir) : ''\n    path = pathLib.join(workdir, path)\n    return fs.readFileSync(path).toString()\n  }\n\n  /**\n   * Note: Leaving this here for now, but design of the tool has changed and probably won't do things this way any more\n   */\n  function loadRemoteCss(href) {\n    let baseurl = options.baseurl || ''\n    return request('GET', baseurl + href).body.toString()\n  }\n}\n"]}