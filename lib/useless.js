'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default = Useless;var _css=require('css');var _css2=_interopRequireDefault(_css);var _cheerio=require('cheerio');var _cheerio2=_interopRequireDefault(_cheerio);var _cssesc=require('cssesc');var _cssesc2=_interopRequireDefault(_cssesc);function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{default:obj};} /**
 * Useless(html, css) -> css
 */function Useless(html,css){var $=_cheerio2.default.load(html);return reduceCss(css);function reduceCss(css){var ast=_css2.default.parse(css || '');var candidateRules=ast.stylesheet.rules;var activeRules=candidateRules.map(function(rule){switch(rule.type){case 'rule':rule.selectors = rule.selectors.filter(filterSelector);return rule.selectors.length == 0?null:rule;break;case 'media':rule.rules = rule.rules.filter(function(rule){return rule.type === 'rule';}).map(function(rule){rule.selectors = rule.selectors.filter(filterSelector);return rule.selectors.length == 0?null:rule;}).filter(function(rule){return rule !== null && rule !== undefined;});return rule.rules.length == 0?null:rule;break;case 'comment': // curently not including comments
break;case 'keyframes':return rule;break;case 'font-face':return rule;break;default:console.error('Unknown rule! Add ' + rule.type + ' as case to switch on!');return rule;break;}}).filter(function(rule){return rule !== null && rule !== undefined;});ast.stylesheet.rules = activeRules;return _css2.default.stringify(ast);}function filterSelector(selector){var result=false;var override=/(@|(:link)|(:visited)|:(active)|(:hover)|(:focus)|(:target)|(:disable)|(:enabled)|(:checked)|(::)|(:before)|(:after))/;if(override.test(selector)){if(/::/.test(selector)){selector = selector.substring(0,selector.lastIndexOf('::'));}else {selector = selector.substring(0,selector.lastIndexOf(':'));}}var escaped=selector.replace(/([\@\^\:\(\)])/g,'\\$1'); //"
var selection=$(escaped);result = selection.length > 0;return result;}}
//# sourceMappingURL=useless.js.map